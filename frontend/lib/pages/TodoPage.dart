import 'package:flutter/material.dart';
import 'package:frontend/api/Todo/TodoItem.dart';
import 'package:frontend/api/Todo/controller/category_controller.dart';
import 'package:frontend/components/Todo/TodoDetail/AddCategory.dart';
import 'package:frontend/constants/colors.dart';
import 'package:frontend/components/Calendar/CustomMonthCalendar.dart';
import 'package:frontend/components/Calendar/CustomWeekCalendar.dart';
import 'package:frontend/components/Todo/Todo.dart';
import 'package:frontend/components/Todo/TodoDetail/AddTodo.dart';
import 'package:frontend/components/Todo/TodoDetail/TodoDetail.dart';

class TodoPageView extends StatefulWidget {
  const TodoPageView({super.key});

  @override
  State<TodoPageView> createState() => _MainPageViewState();
}

class _MainPageViewState extends State<TodoPageView> {
  List<TodoItem> todoList = [];

  Future<void> loadGoalsForDate(DateTime date) async {
    try {
      final userId = '1'; // TODO: Ïã§Ï†ú Î°úÍ∑∏Ïù∏ Ïú†Ï†Ä IDÎ°ú ÍµêÏ≤¥
      final formattedDate = date.toIso8601String().substring(
        0,
        10,
      ); // yyyy-MM-dd
      final goals = await CategoryController.fetchGoalsByDate(
        userId: userId,
        date: formattedDate,
      );

      // Î≥ÄÌôò: Goal ‚Üí TodoItem
      final List<TodoItem> mapped = goals.map((goal) {
        final Color mainColor = Colors.blue;

        return TodoItem(
          category: goal.category.name,
          mainColor: mainColor,
          subTodos: [
            SubTodo(
              goalTitle: goal.title,
              isGroup: goal.isGroupGoal,
              isDone: goal.completed,
              isTimerRequired: false, // TODO: backend certType ÌïÑÎìú Ï∂îÍ∞Ä Ïãú Î∞òÏòÅ
              isPhotoRequired: false,
            ),
          ],
        );
      }).toList();

      setState(() {
        todoList = mapped;
      });
    } catch (e) {
      print('Î™©Ìëú Î∂àÎü¨Ïò§Í∏∞ Ïò§Î•ò: $e');
    }
  }

  DateTime selectedDate = DateTime.now(); // ‚úÖ ÏÑ†ÌÉùÎêú ÎÇ†Ïßú Ï†ÄÏû•

  bool isMonthView = true;
  bool isDetailVisible = false; //Î™©Ìëú Ï∂îÍ∞Ä Ï∞Ω Î≥¥Ïù¥Í∏∞
  bool isDoneDetailVisible = false; //Í∞úÎ≥Ñ Î™©Ìëú Ï∞Ω Î≥¥Í∏∞
  bool isAddCategoryVisible = false;

  //Î™©Ìëú Ï∂îÍ∞Ä Ï∞Ω Î≥¥Ïù¥Í∏∞
  String selectedCategory = '';
  Color selectedMainColor = Colors.grey;
  Color selectedSubColor = Colors.grey;

  //Í∞úÎ≥Ñ Î™©Ìëú ÏÑ∏Î∂ÄÏÇ¨Ìï≠ ÎÇ¥Ïö© Î≥¥Ïù¥Í∏∞ (ÏúÑÏóêÎûë Ìï©Ï≥êÏ†∏ÏïºÌï®)
  String selectedGoalText = '';
  bool isDone = false;
  String selectedGroupType = '';
  String selectedCertType = '';

  void toggleView() {
    setState(() {
      isMonthView = !isMonthView;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 15, vertical: 15),
            child: Column(
              children: [
                // ÏÉÅÎã® ÌÜ†Í∏Ä Î≤ÑÌäº
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton(
                      onPressed: toggleView,
                      style: TextButton.styleFrom(
                        foregroundColor: Colors.black, // ÌÖçÏä§Ìä∏ ÏÉâÏÉÅ
                        padding: const EdgeInsets.symmetric(horizontal: 8),
                        minimumSize: Size.zero, // ÏµúÏÜå ÌÅ¨Í∏∞ Ï†úÍ±∞ (ÌïÑÏöî Ïãú)
                        tapTargetSize: MaterialTapTargetSize.shrinkWrap,
                      ),
                      child: Text(
                        isMonthView ? "Month üü∞" : "Week üü∞",
                        style: const TextStyle(
                          fontSize: 12,
                          color: SubTextColor,
                        ),
                      ),
                    ),
                  ],
                ),

                // ‚úÖ Îã¨Î†• Î∑∞: Month ‚Üî Week
                isMonthView
                    ? CustomMonthCalendar(
                        onDateSelected: (date) {
                          setState(() {
                            selectedDate = date;
                            // TODO: Ìï¥Îãπ ÎÇ†Ïßú Í∏∞Ï§ÄÏúºÎ°ú todoList Í∞±Ïã†ÌïòÍ∏∞
                          });
                          loadGoalsForDate(date);
                        },
                      )
                    : CustomWeekCalendar(
                        onDateSelected: (date) {
                          setState(() {
                            selectedDate = date;
                            // API Ïó∞Í≤∞ ÌõÑ: fetchGoalsByDate(userId, selectedDate);
                          });
                          loadGoalsForDate(date);
                        },
                      ),

                const SizedBox(height: 20),
                Expanded(
                  child: SingleChildScrollView(
                    child: Column(
                      children: [
                        for (final item in todoList)
                          Todo(
                            todoItem: item, // Todo : Ïπ¥ÌÖåÍ≥†Î¶¨ÏôÄ Ìï¥Îãπ Ïπ¥ÌÖåÍ≥†Î¶¨Ïùò Î™©ÌëúÎì§
                            onHeaderTap: (category, main, sub) {
                              // Ïπ¥ÌÖåÍ≥†Î¶¨ ÌÅ¥Î¶≠ -> Ìï¥Îãπ Ïπ¥ÌÖåÍ≥†Î¶¨Ïùò Î™©Ìëú Ï∂îÍ∞Ä Ïãú ÎÑòÏñ¥Í∞ÄÎäî Ìï≠Î™©
                              setState(() {
                                selectedCategory = category; // Ïπ¥ÌÖåÍ≥†Î¶¨
                                selectedMainColor = main; // Î©îÏù∏ Ïª¨Îü¨
                                selectedSubColor = sub; // ÏÑúÎ∏å Ïª¨Îü¨
                                isDetailVisible = true;
                                isDoneDetailVisible = false;
                                isAddCategoryVisible = false;
                              });
                            },
                            onItemTap: // Î™©Ìëú ÌÅ¥Î¶≠ -> Î™©Ìëú ÏÑ∏Î∂ÄÏÇ¨Ìï≠ ÎùÑÏö∏Îïå ÎÑòÏñ¥Í∞ÄÎäî Ìï≠Î™©Îì§
                                ({
                                  required String category,
                                  required subTodo,
                                  required Color mainColor,
                                  required Color subColor,
                                }) {
                                  setState(() {
                                    selectedCategory = category;
                                    selectedMainColor = mainColor;
                                    selectedSubColor = subColor;
                                    selectedGoalText = subTodo.goalTitle;
                                    isDone = subTodo.isDone;
                                    selectedGroupType = subTodo.isGroup
                                        ? 'Í∑∏Î£π'
                                        : 'Í∞úÏù∏';
                                    selectedCertType = subTodo.isTimerRequired
                                        ? 'time'
                                        : subTodo.isPhotoRequired
                                        ? 'photo'
                                        : '';
                                    isDetailVisible = false;
                                    isDoneDetailVisible = true;
                                    isAddCategoryVisible = false;
                                  });
                                },
                          ),

                        const SizedBox(height: 15),
                        Align(
                          alignment: Alignment.centerLeft,
                          child: TextButton(
                            onPressed: () {
                              setState(() {
                                isAddCategoryVisible = true;
                                isDetailVisible = false;
                                isDoneDetailVisible = false;
                              });
                            },

                            style: TextButton.styleFrom(
                              padding: EdgeInsets.only(left: 10),
                              minimumSize: Size(0, 0),
                              tapTargetSize: MaterialTapTargetSize.shrinkWrap,
                            ),
                            child: Text(
                              '‚ûï Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÍ∞Ä',
                              style: const TextStyle(
                                fontSize: 12,
                                color: Colors.black,
                              ),
                            ),
                          ),
                        ),
                        const SizedBox(height: 60),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
          if (isDetailVisible)
            Positioned(
              left: 0,
              right: 0,
              bottom: 0,
              child: AddTodo(
                category: selectedCategory,
                mainColor: selectedMainColor,
                subColor: selectedSubColor,
                onClose: () {
                  setState(() {
                    isDetailVisible = false;
                  });
                },
              ),
            ),
          if (isDoneDetailVisible)
            Positioned(
              left: 0,
              right: 0,
              bottom: 0,
              child: TodoDetail(
                category: selectedCategory,
                group: selectedGroupType,
                goalText: selectedGoalText,
                done: isDone,
                certificationType: selectedCertType,
                mainColor: selectedMainColor,
                subColor: selectedSubColor,
                onClose: () {
                  setState(() {
                    isDoneDetailVisible = false;
                  });
                },
              ),
            ),
          if (isAddCategoryVisible)
            Positioned(
              left: 0,
              right: 0,
              bottom: 0,
              child: AddCategory(
                category: '', // Ï¥àÍ∏∞Í∞í ÎòêÎäî ÏÑ†ÌÉùÍ∞í
                mainColor: Colors.grey,
                subColor: Colors.grey.shade100,
                onClose: () {
                  setState(() {
                    isAddCategoryVisible = false;
                  });
                },
              ),
            ),
        ],
      ),
    );
  }
}
